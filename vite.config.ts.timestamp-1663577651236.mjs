// vite.config.ts
import { defineConfig, normalizePath } from "vite";
import vue from "@vitejs/plugin-vue";
import autoprefixer from "autoprefixer";
import postcssPxtorem from "postcss-pxtorem";
import svgr from "vite-svg-loader";
import viteStylelint from "@amatlash/vite-plugin-stylelint";
import viteEslint from "vite-plugin-eslint";
import cssnano from "cssnano";
import path from "path";
var __vite_injected_original_dirname = "/Users/hao.yang/Desktop/self/vitetest";
var _viteStylelint = viteStylelint.default;
var isProduction = process.env.NODE_ENV === "production";
var CDN_URL = "xxxxxx";
var variablePath = normalizePath(path.resolve("./src/variable.scss"));
var vite_config_default = defineConfig({
  base: isProduction ? CDN_URL : "/",
  plugins: [
    vue(),
    svgr(),
    viteEslint(),
    _viteStylelint({
      exclude: /windicss|node_modules/
    })
  ],
  resolve: {
    alias: {
      "@assets": path.join(__vite_injected_original_dirname, "src/assets")
    }
  },
  json: {
    stringify: true
  },
  css: {
    preprocessorOptions: {
      scss: {
        additionalData: `@import "${variablePath}";`
      }
    },
    postcss: {
      plugins: [
        autoprefixer({
          overrideBrowserslist: ["Chrome > 40", "ff > 31", "ie 11"]
        }),
        postcssPxtorem({
          rootValue: 20,
          propList: ["*"]
        }),
        cssnano({
          preset: "default"
        })
      ]
    }
  },
  assetsInclude: [".txt"]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvaGFvLnlhbmcvRGVza3RvcC9zZWxmL3ZpdGV0ZXN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvaGFvLnlhbmcvRGVza3RvcC9zZWxmL3ZpdGV0ZXN0L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9oYW8ueWFuZy9EZXNrdG9wL3NlbGYvdml0ZXRlc3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIG5vcm1hbGl6ZVBhdGggfSBmcm9tICd2aXRlJ1xuaW1wb3J0IHZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnXG5pbXBvcnQgYXV0b3ByZWZpeGVyIGZyb20gJ2F1dG9wcmVmaXhlcidcbmltcG9ydCBwb3N0Y3NzUHh0b3JlbSBmcm9tICdwb3N0Y3NzLXB4dG9yZW0nXG5pbXBvcnQgc3ZnciBmcm9tICd2aXRlLXN2Zy1sb2FkZXInXG4vLyBpbXBvcnQgdGFpbHdpbmRjc3MgZnJvbSAndGFpbHdpbmRjc3MnXG4vLyAhIFx1OEZEOVx1NEUyQVx1NUJCNlx1NEYxOVx1NjZCNFx1OTczMlx1NTFGQVx1Njc2NVx1NzY4NFx1NEUwRFx1NjYyRlx1NTFGRFx1NjU3MCBcdTY2MkZcdTRFMkFcdTVCRjlcdThDNjFcbmltcG9ydCB2aXRlU3R5bGVsaW50IGZyb20gJ0BhbWF0bGFzaC92aXRlLXBsdWdpbi1zdHlsZWxpbnQnXG5pbXBvcnQgdml0ZUVzbGludCBmcm9tICd2aXRlLXBsdWdpbi1lc2xpbnQnXG5pbXBvcnQgY3NzbmFubyBmcm9tICdjc3NuYW5vJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxuY29uc3QgX3ZpdGVTdHlsZWxpbnQgPSAodml0ZVN0eWxlbGludCBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KS5kZWZhdWx0XG5cbmNvbnN0IGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbidcbi8vIFx1NTg2Qlx1NTE2NVx1OTg3OVx1NzZFRVx1NzY4NCBDRE4gXHU1N0RGXHU1NDBEXHU1NzMwXHU1NzQwXG5jb25zdCBDRE5fVVJMID0gJ3h4eHh4eCdcblxuLy8gXHU1MTY4XHU1QzQwIHNjc3MgXHU2NTg3XHU0RUY2XHU3Njg0XHU4REVGXHU1Rjg0XG4vLyBcdTc1Mjggbm9ybWFsaXplUGF0aCBcdTg5RTNcdTUxQjMgd2luZG93IFx1NEUwQlx1NzY4NFx1OERFRlx1NUY4NFx1OTVFRVx1OTg5OFxuY29uc3QgdmFyaWFibGVQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoLnJlc29sdmUoJy4vc3JjL3ZhcmlhYmxlLnNjc3MnKSlcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbiAgICBiYXNlOiBpc1Byb2R1Y3Rpb24gPyBDRE5fVVJMIDogJy8nLFxuICAgIHBsdWdpbnM6IFtcbiAgICAgICAgdnVlKCksXG4gICAgICAgIHN2Z3IoKSxcbiAgICAgICAgdml0ZUVzbGludCgpLFxuICAgICAgICBfdml0ZVN0eWxlbGludCh7XG4gICAgICAgICAgICAvLyBcdTVCRjlcdTY3RDBcdTRFOUJcdTY1ODdcdTRFRjZcdTYzOTJcdTk2NjRcdTY4QzBcdTY3RTVcbiAgICAgICAgICAgIGV4Y2x1ZGU6IC93aW5kaWNzc3xub2RlX21vZHVsZXMvXG4gICAgICAgIH0pXG4gICAgXSxcbiAgICByZXNvbHZlOiB7XG4gICAgICAgIGFsaWFzOiB7XG4gICAgICAgICAgICAnQGFzc2V0cyc6IHBhdGguam9pbihfX2Rpcm5hbWUsICdzcmMvYXNzZXRzJylcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gXHU1OTA0XHU3NDA2SlNPTlx1ODlFM1x1Njc5MFxuICAgIGpzb246IHtcbiAgICAgICAgc3RyaW5naWZ5OiB0cnVlXG4gICAgfSxcbiAgICAvLyBjc3MgXHU3NkY4XHU1MTczXHU3Njg0XHU5MTREXHU3RjZFXG4gICAgY3NzOiB7XG4gICAgICAgIHByZXByb2Nlc3Nvck9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNjc3M6IHtcbiAgICAgICAgICAgICAgICAvLyBhZGRpdGlvbmFsRGF0YSBcdTc2ODRcdTUxODVcdTVCQjlcdTRGMUFcdTU3MjhcdTZCQ0ZcdTRFMkEgc2NzcyBcdTY1ODdcdTRFRjZcdTc2ODRcdTVGMDBcdTU5MzRcdTgxRUFcdTUyQThcdTZDRThcdTUxNjVcbiAgICAgICAgICAgICAgICBhZGRpdGlvbmFsRGF0YTogYEBpbXBvcnQgXCIke3ZhcmlhYmxlUGF0aH1cIjtgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFx1OEZEQlx1ODg0QyBQb3N0Q1NTIFx1OTE0RFx1N0Y2RVxuICAgICAgICBwb3N0Y3NzOiB7XG4gICAgICAgICAgICBwbHVnaW5zOiBbXG4gICAgICAgICAgICAgICAgYXV0b3ByZWZpeGVyKHtcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2MzA3XHU1QjlBXHU3NkVFXHU2ODA3XHU2RDRGXHU4OUM4XHU1NjY4XG4gICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlQnJvd3NlcnNsaXN0OiBbJ0Nocm9tZSA+IDQwJywgJ2ZmID4gMzEnLCAnaWUgMTEnXVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHBvc3Rjc3NQeHRvcmVtKHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdFZhbHVlOiAyMCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcExpc3Q6IFsnKiddXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY3NzbmFubyh7XG4gICAgICAgICAgICAgICAgICAgIHByZXNldDogJ2RlZmF1bHQnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyB0YWlsd2luZGNzcygpLFxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfSxcbiAgICBhc3NldHNJbmNsdWRlOiBbJy50eHQnXVxufSlcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBaVMsU0FBUyxjQUFjLHFCQUFxQjtBQUM3VSxPQUFPLFNBQVM7QUFDaEIsT0FBTyxrQkFBa0I7QUFDekIsT0FBTyxvQkFBb0I7QUFDM0IsT0FBTyxVQUFVO0FBR2pCLE9BQU8sbUJBQW1CO0FBQzFCLE9BQU8sZ0JBQWdCO0FBQ3ZCLE9BQU8sYUFBYTtBQUNwQixPQUFPLFVBQVU7QUFWakIsSUFBTSxtQ0FBbUM7QUFZekMsSUFBTSxpQkFBa0IsY0FBc0M7QUFFOUQsSUFBTSxlQUFlLFFBQVEsSUFBSSxhQUFhO0FBRTlDLElBQU0sVUFBVTtBQUloQixJQUFNLGVBQWUsY0FBYyxLQUFLLFFBQVEscUJBQXFCLENBQUM7QUFFdEUsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDeEIsTUFBTSxlQUFlLFVBQVU7QUFBQSxFQUMvQixTQUFTO0FBQUEsSUFDTCxJQUFJO0FBQUEsSUFDSixLQUFLO0FBQUEsSUFDTCxXQUFXO0FBQUEsSUFDWCxlQUFlO0FBQUEsTUFFWCxTQUFTO0FBQUEsSUFDYixDQUFDO0FBQUEsRUFDTDtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ0wsT0FBTztBQUFBLE1BQ0gsV0FBVyxLQUFLLEtBQUssa0NBQVcsWUFBWTtBQUFBLElBQ2hEO0FBQUEsRUFDSjtBQUFBLEVBRUEsTUFBTTtBQUFBLElBQ0YsV0FBVztBQUFBLEVBQ2Y7QUFBQSxFQUVBLEtBQUs7QUFBQSxJQUNELHFCQUFxQjtBQUFBLE1BQ2pCLE1BQU07QUFBQSxRQUVGLGdCQUFnQixZQUFZO0FBQUEsTUFDaEM7QUFBQSxJQUNKO0FBQUEsSUFFQSxTQUFTO0FBQUEsTUFDTCxTQUFTO0FBQUEsUUFDTCxhQUFhO0FBQUEsVUFFVCxzQkFBc0IsQ0FBQyxlQUFlLFdBQVcsT0FBTztBQUFBLFFBQzVELENBQUM7QUFBQSxRQUNELGVBQWU7QUFBQSxVQUNYLFdBQVc7QUFBQSxVQUNYLFVBQVUsQ0FBQyxHQUFHO0FBQUEsUUFDbEIsQ0FBQztBQUFBLFFBQ0QsUUFBUTtBQUFBLFVBQ0osUUFBUTtBQUFBLFFBQ1osQ0FBQztBQUFBLE1BRUw7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBQ0EsZUFBZSxDQUFDLE1BQU07QUFDMUIsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
